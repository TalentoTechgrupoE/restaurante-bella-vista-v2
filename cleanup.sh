#!/bin/bash

# ================================================================
# üßπ SCRIPT DE LIMPIEZA DEL PROYECTO
# Restaurante Bella Vista
# ================================================================

# Colores para output
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
CYAN='\033[0;36m'
NC='\033[0m' # No Color

# Funciones de output
print_header() {
    echo -e "${BLUE}‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ${NC}"
    echo -e "${BLUE}$1${NC}"
    echo -e "${BLUE}‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ${NC}"
}

print_success() {
    echo -e "${GREEN}‚úÖ $1${NC}"
}

print_warning() {
    echo -e "${YELLOW}‚ö†Ô∏è  $1${NC}"
}

print_error() {
    echo -e "${RED}‚ùå $1${NC}"
}

print_info() {
    echo -e "${CYAN}‚ÑπÔ∏è  $1${NC}"
}

# Funci√≥n para confirmar acciones destructivas
confirm_action() {
    local message="$1"
    echo -e "${YELLOW}‚ö†Ô∏è  $message${NC}"
    echo -e "${YELLOW}Esta acci√≥n NO se puede deshacer.${NC}"
    read -p "¬øEst√°s seguro? (y/N): " -n 1 -r
    echo
    if [[ ! $REPLY =~ ^[Yy]$ ]]; then
        echo -e "${CYAN}Operaci√≥n cancelada${NC}"
        return 1
    fi
    return 0
}

# Funci√≥n para detener todos los servicios
stop_services() {
    print_header "üõë DETENIENDO SERVICIOS"
    
    # Detener aplicaci√≥n principal
    if [ -f "docker-compose.yml" ]; then
        print_info "Deteniendo aplicaci√≥n principal..."
        docker-compose down
        print_success "Aplicaci√≥n principal detenida"
    fi
    
    # Detener monitoreo
    if [ -f "monitoring/docker-compose.monitoring.yml" ]; then
        print_info "Deteniendo servicios de monitoreo..."
        docker-compose -f monitoring/docker-compose.monitoring.yml down
        print_success "Servicios de monitoreo detenidos"
    fi
    
    echo ""
}

# Funci√≥n para limpiar contenedores
clean_containers() {
    print_header "üê≥ LIMPIANDO CONTENEDORES"
    
    # Obtener contenedores del proyecto
    local containers=$(docker ps -a --filter "name=restaurante" --format "{{.Names}}" 2>/dev/null)
    
    if [ -z "$containers" ]; then
        print_info "No se encontraron contenedores del proyecto"
    else
        print_info "Eliminando contenedores del proyecto..."
        echo "$containers" | xargs docker rm -f 2>/dev/null || true
        print_success "Contenedores eliminados"
    fi
    
    echo ""
}

# Funci√≥n para limpiar im√°genes
clean_images() {
    print_header "üñºÔ∏è  LIMPIANDO IM√ÅGENES"
    
    # Buscar im√°genes del proyecto
    local images=$(docker images --filter "reference=restaurante*" --format "{{.Repository}}:{{.Tag}}" 2>/dev/null)
    
    if [ -z "$images" ]; then
        print_info "No se encontraron im√°genes del proyecto"
    else
        print_info "Eliminando im√°genes del proyecto..."
        echo "$images" | xargs docker rmi -f 2>/dev/null || true
        print_success "Im√°genes eliminadas"
    fi
    
    echo ""
}

# Funci√≥n para limpiar vol√∫menes
clean_volumes() {
    print_header "üíæ LIMPIANDO VOL√öMENES"
    
    if confirm_action "Se eliminar√°n TODOS los datos de la base de datos"; then
        # Buscar vol√∫menes del proyecto
        local volumes=$(docker volume ls --filter "name=restaurante" --format "{{.Name}}" 2>/dev/null)
        
        if [ -z "$volumes" ]; then
            print_info "No se encontraron vol√∫menes del proyecto"
        else
            print_info "Eliminando vol√∫menes del proyecto..."
            echo "$volumes" | xargs docker volume rm -f 2>/dev/null || true
            print_success "Vol√∫menes eliminados"
        fi
    fi
    
    echo ""
}

# Funci√≥n para limpiar red
clean_networks() {
    print_header "üåê LIMPIANDO REDES"
    
    # Verificar si existe la red del proyecto
    if docker network ls | grep -q "restaurante-network"; then
        print_info "Eliminando red del proyecto..."
        docker network rm restaurante-network 2>/dev/null || true
        print_success "Red eliminada"
    else
        print_info "No se encontr√≥ la red del proyecto"
    fi
    
    echo ""
}

# Funci√≥n para limpiar archivos temporales
clean_temp_files() {
    print_header "üóÇÔ∏è  LIMPIANDO ARCHIVOS TEMPORALES"
    
    # Limpiar logs temporales
    if [ -d "logs" ]; then
        print_info "Limpiando directorio de logs..."
        rm -rf logs/*.log 2>/dev/null || true
        print_success "Logs temporales eliminados"
    fi
    
    # Limpiar cach√©s de Node.js
    if [ -d "frontend-usuario/node_modules" ]; then
        print_info "Limpiando node_modules..."
        rm -rf frontend-usuario/node_modules 2>/dev/null || true
        print_success "node_modules eliminado"
    fi
    
    # Limpiar package-lock.json
    if [ -f "frontend-usuario/package-lock.json" ]; then
        print_info "Eliminando package-lock.json..."
        rm -f frontend-usuario/package-lock.json 2>/dev/null || true
        print_success "package-lock.json eliminado"
    fi
    
    echo ""
}

# Funci√≥n para limpiar datos de Grafana/Prometheus
clean_monitoring_data() {
    print_header "üìä LIMPIANDO DATOS DE MONITOREO"
    
    if confirm_action "Se eliminar√°n dashboards, configuraciones y datos hist√≥ricos de monitoreo"; then
        # Limpiar datos de Grafana
        if [ -d "monitoring/grafana-data" ]; then
            print_info "Limpiando datos de Grafana..."
            rm -rf monitoring/grafana-data 2>/dev/null || true
            print_success "Datos de Grafana eliminados"
        fi
        
        # Limpiar datos de Prometheus
        if [ -d "monitoring/prometheus-data" ]; then
            print_info "Limpiando datos de Prometheus..."
            rm -rf monitoring/prometheus-data 2>/dev/null || true
            print_success "Datos de Prometheus eliminados"
        fi
    fi
    
    echo ""
}

# Funci√≥n para limpieza completa del sistema Docker
clean_docker_system() {
    print_header "üßπ LIMPIEZA COMPLETA DEL SISTEMA DOCKER"
    
    if confirm_action "Se ejecutar√° 'docker system prune -a' - eliminar√° TODO lo no utilizado en Docker"; then
        print_info "Ejecutando limpieza completa de Docker..."
        docker system prune -a -f --volumes
        print_success "Sistema Docker limpiado completamente"
    fi
    
    echo ""
}

# Funci√≥n para mostrar espacio liberado
show_space_info() {
    print_header "üìä INFORMACI√ìN DE ESPACIO"
    
    print_info "Espacio usado por Docker:"
    docker system df
    
    echo ""
}

# Funci√≥n para restablecer configuraci√≥n
reset_config() {
    print_header "‚öôÔ∏è RESTABLECIENDO CONFIGURACI√ìN"
    
    if confirm_action "Se eliminar√° el archivo .env (se puede recrear desde .env.example)"; then
        if [ -f ".env" ]; then
            print_info "Eliminando archivo .env..."
            rm -f .env
            print_success "Archivo .env eliminado"
            print_info "Para recrear: cp .env.example .env"
        else
            print_info "No se encontr√≥ archivo .env"
        fi
    fi
    
    echo ""
}

# Men√∫ principal
show_menu() {
    echo ""
    print_header "üßπ MEN√ö DE LIMPIEZA - RESTAURANTE BELLA VISTA"
    echo ""
    echo -e "${CYAN}Selecciona una opci√≥n:${NC}"
    echo ""
    echo -e "${YELLOW}B√ÅSICAS:${NC}"
    echo "  1) üõë Detener todos los servicios"
    echo "  2) üê≥ Limpiar contenedores del proyecto"
    echo "  3) üñºÔ∏è  Limpiar im√°genes del proyecto"
    echo "  4) üåê Limpiar redes del proyecto"
    echo ""
    echo -e "${YELLOW}DATOS:${NC}"
    echo "  5) üíæ Limpiar vol√∫menes (‚ö†Ô∏è  ELIMINA DATOS DB)"
    echo "  6) üìä Limpiar datos de monitoreo"
    echo "  7) üóÇÔ∏è  Limpiar archivos temporales"
    echo "  8) ‚öôÔ∏è  Restablecer configuraci√≥n (.env)"
    echo ""
    echo -e "${YELLOW}AVANZADAS:${NC}"
    echo "  9) üöÄ Limpieza r√°pida (servicios + contenedores + redes)"
    echo " 10) üßπ Limpieza completa (TODO excepto configuraci√≥n)"
    echo " 11) ‚ò¢Ô∏è  Limpieza NUCLEAR (‚ö†Ô∏è  ELIMINA TODO)"
    echo " 12) üê≥ Limpiar sistema Docker completo"
    echo ""
    echo -e "${YELLOW}INFORMACI√ìN:${NC}"
    echo " 13) üìä Mostrar informaci√≥n de espacio"
    echo " 14) ‚ùå Salir"
    echo ""
}

# Funci√≥n de limpieza r√°pida
quick_clean() {
    print_header "üöÄ LIMPIEZA R√ÅPIDA"
    stop_services
    clean_containers
    clean_networks
    print_success "Limpieza r√°pida completada"
}

# Funci√≥n de limpieza completa
full_clean() {
    print_header "üßπ LIMPIEZA COMPLETA"
    stop_services
    clean_containers
    clean_images
    clean_networks
    clean_temp_files
    clean_monitoring_data
    print_success "Limpieza completa finalizada"
}

# Funci√≥n de limpieza nuclear
nuclear_clean() {
    print_header "‚ò¢Ô∏è  LIMPIEZA NUCLEAR"
    print_warning "Esta opci√≥n eliminar√° ABSOLUTAMENTE TODO"
    
    if confirm_action "¬øEst√°s COMPLETAMENTE seguro? Esta acci√≥n es IRREVERSIBLE"; then
        stop_services
        clean_containers
        clean_images
        clean_volumes
        clean_networks
        clean_temp_files
        clean_monitoring_data
        reset_config
        print_success "Limpieza nuclear completada - El proyecto est√° como reci√©n clonado"
    fi
}

# ========================================
# PROGRAMA PRINCIPAL
# ========================================

# Verificar que estamos en el directorio correcto
if [ ! -f "docker-compose.yml" ]; then
    print_error "No se encontr√≥ docker-compose.yml"
    print_error "Aseg√∫rate de ejecutar este script desde el directorio ra√≠z del proyecto"
    exit 1
fi

# Verificar que Docker est√© instalado
if ! command -v docker &> /dev/null; then
    print_error "Docker no est√° instalado"
    exit 1
fi

# Bucle principal del men√∫
while true; do
    show_menu
    read -p "Ingresa tu opci√≥n (1-14): " choice
    
    case $choice in
        1)
            stop_services
            ;;
        2)
            clean_containers
            ;;
        3)
            clean_images
            ;;
        4)
            clean_networks
            ;;
        5)
            clean_volumes
            ;;
        6)
            clean_monitoring_data
            ;;
        7)
            clean_temp_files
            ;;
        8)
            reset_config
            ;;
        9)
            quick_clean
            ;;
        10)
            full_clean
            ;;
        11)
            nuclear_clean
            ;;
        12)
            clean_docker_system
            ;;
        13)
            show_space_info
            ;;
        14)
            print_success "¬°Hasta luego!"
            exit 0
            ;;
        *)
            print_error "Opci√≥n inv√°lida. Por favor selecciona 1-14."
            ;;
    esac
    
    echo ""
    read -p "Presiona Enter para continuar..."
done
